pipeline {
    agent any

    stages {
        stage('Get approval') {
            options {
                timeout(time: 59, unit: 'MINUTES')
            }
            steps {
                input "Please Approve To Proceed The Deployment"
            }
        }

        stage('Checkout Latest Code') {
            steps {
                dir('tg-test-cicd') {
                    git branch: 'staging',
                        credentialsId: '5bb806d0-f7ec-44bb-bcf9-6194de97138e',
                        url: 'https://github.com/tgrid-usa/test-cicd.git'
                    sh 'ls -la'
                }
            }
        }

        stage('Checkout Docker File') {
            steps {
                git branch: 'staging',
                    credentialsId: '5bb806d0-f7ec-44bb-bcf9-6194de97138e',
                    url: 'https://github.com/tgrid-usa/tgrid-dockerfile.git'
                sh 'ls -la'
                sh 'cp test-cicd/Dockerfile ./tg-test-cicd/Dockerfile'
                sh 'cat Dockerfile'
                sh 'ls -la'
                sh 'pwd'
            }
        }

        stage('SonarQube analysis') {
            environment {
                SCANNER_HOME = tool 'sonar-scanner'
            }
            steps {
                dir('tg-test-cicd') {
                    sh "echo $SCANNER_HOME"
                    withSonarQubeEnv(credentialsId: 'sonarqube-token', installationName: 'sonar-scanner') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=TG-Test-CICD \
                        -Dsonar.projectName=Issuer-TG-Test-CICD \
                        -Dsonar.sources=. \
                        -Dsonar.language=js
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage('Deploy') {
            steps {
                dir('tg-test-cicd') {
                    script {
                        sh "git rev-parse --short HEAD > commitHash.txt"
                        def commitHash = sh(script: "cat commitHash.txt", returnStdout: true).trim()
                        def dockerImageTag = "test-cicd-${commitHash}"
                        def dockerImageName = "asia-south1-docker.pkg.dev/tg-uat-446010/trustgrid/test-cicd:${dockerImageTag}"

                        withCredentials([file(credentialsId: 'gcp-staging', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            sh '''
                               sudo gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                               sudo gcloud auth configure-docker asia-south1-docker.pkg.dev
                            '''
                            sh "sudo docker build -t ${dockerImageName} ."
                            sh "sudo docker push ${dockerImageName}"
                            sh "sudo docker rmi ${dockerImageName}"
                        }
                    }
                }
            }
        }

        stage('List Images in GCP Artifact Registry') {
            steps {
                withCredentials([file(credentialsId: 'gcp-staging', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    script {
                        sh '''
                           gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                           gcloud auth configure-docker asia-south1-docker.pkg.dev
                        '''
                        echo "Listing images in Google Artifact Registry:"
                        sh "gcloud container images list-tags asia-south1-docker.pkg.dev/tg-uat-446010/trustgrid/test-cicd --format=json"
                    }
                }
            }
        }

        stage('Post Deploy') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '5bb806d0-f7ec-44bb-bcf9-6194de97138e', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                        git clone -b staging https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/tgrid-usa/tgrid-helm.git healm-charts || true
                        cd ${WORKSPACE}/tg-test-cicd && git rev-parse --short HEAD > commitHash.txt
                        '''
                        def commitHash = sh(script: "cat ${WORKSPACE}/tg-test-cicd/commitHash.txt", returnStdout: true).trim()
                        def currentCommitHash = "test-cicd-${commitHash}"

                        sh """
                            cd ${WORKSPACE}/healm-charts/test-cicd/
                            sed -i 's|tag:.*|tag: "${currentCommitHash}"|' values.yaml
                        """

                        sh '''
                        cd ${WORKSPACE}/healm-charts
                        git add -A
                        git commit -m 'values file tag changed'
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/tgrid-usa/tgrid-helm.git
                        '''
                    }
                }
            }
        }
    }
}
