pipeline {
    agent any

    environment {
        REPO_CICD = 'https://github.com/tgrid-usa/test-cicd.git'
        REPO_DOCKERFILE = 'https://github.com/tgrid-usa/tgrid-dockerfile.git'
        REPO_HELM = 'github.com/tgrid-usa/tgrid-helm.git'
        BRANCH = 'staging'
        CREDENTIALS_ID = '5bb806d0-f7ec-44bb-bcf9-6194de97138e'
        SONAR_PROJECT_KEY = 'TG-Test-CICD'
        SONAR_PROJECT_NAME = 'Issuer-TG-Test-CICD'
        SONAR_ORG = 'trustgrid-staging'
        SONAR_URL = 'https://sonarcloud.io'
        SCANNER_HOME = tool 'sonar-scanner'
        SONAR_LANGUAGE = 'js'
        GCP_CREDENTIALS_ID = 'gcp-staging'
        GCP_REGION = 'asia-south1'
        GCP_PROJECT = 'tg-uat-446010'
        IMAGE_NAME = 'trustgrid/test-cicd'
        WORKING_DIR = 'tg-test-cicd'
        DOCKERFILE_DIR = 'test-cicd'
    }

    stages {
        stage('Get approval') {
            options {
                timeout(time: 59, unit: 'MINUTES')
            }
            steps {
                input "Please Approve To Proceed The Deployment"
            }
        }

        stage('Checkout Latest Code') {
            steps {
                dir(WORKING_DIR) {
                    git branch: BRANCH, credentialsId: CREDENTIALS_ID, url: REPO_CICD
                    sh 'ls -la'
                }
            }
        }

        stage('Checkout Docker File') {
            steps {
                git branch: BRANCH, credentialsId: CREDENTIALS_ID, url: REPO_DOCKERFILE
                sh 'ls -la'
                sh "cp ${DOCKERFILE_DIR}/Dockerfile ./${WORKING_DIR}/Dockerfile"
                sh "cat ${WORKING_DIR}/Dockerfile"
            }
        }

        stage('SonarCloud Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarcloud', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQube') { 
                        dir(CLONE_DIR) {
                            sh """
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.organization=${SONAR_ORG} \
                            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.token=$SONAR_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy') {
            steps {
                dir(WORKING_DIR) {
                    script {
                        sh "git rev-parse --short HEAD > commitHash.txt"
                        def commitHash = sh(script: "cat commitHash.txt", returnStdout: true).trim()

                        // Use DOCKERFILE_DIR variable for the Docker tag
                        def dockerImageTag = "${DOCKERFILE_DIR}-${commitHash}"
                        def dockerImageName = "${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${IMAGE_NAME}:${dockerImageTag}"

                        withCredentials([file(credentialsId: GCP_CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            sh """
                               sudo gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                               sudo gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev
                            """
                            sh "sudo docker build -t ${dockerImageName} ."
                            sh "sudo docker push ${dockerImageName}"
                            sh "sudo docker rmi ${dockerImageName}"
                        }
                    }
                }
            }
        }

        stage('List Images in GCP Artifact Registry') {
            steps {
                withCredentials([file(credentialsId: GCP_CREDENTIALS_ID, variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh """
                       gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                       gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev
                       gcloud container images list-tags ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${IMAGE_NAME} --format=json
                    """
                }
            }
        }

        stage('Post Deploy') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                        git clone -b ${BRANCH} https://${GIT_USERNAME}:${GIT_PASSWORD}@${REPO_HELM} healm-charts || true
                        cd ${WORKSPACE}/${WORKING_DIR} && git rev-parse --short HEAD > commitHash.txt
                        """
                        def commitHash = sh(script: "cat ${WORKSPACE}/${WORKING_DIR}/commitHash.txt", returnStdout: true).trim()
                        def currentCommitHash = "${DOCKERFILE_DIR}-${commitHash}"
                        sh "cd ${WORKSPACE}/healm-charts && git fetch origin"
                        sh "cd ${WORKSPACE}/healm-charts && git merge origin/${BRANCH} --no-edit"
                        sh """
                            cd ${WORKSPACE}/healm-charts/test-cicd/
                            sed -i 's|tag:.*|tag: "${currentCommitHash}"|' values.yaml
                        """
                        sh """
                        cd ${WORKSPACE}/healm-charts
                        git add -A
                        git commit -m 'Updated image tag in values.yaml'
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${REPO_HELM}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
